services:
  api:
    image: claimsight-ai-api:latest
    build:
      context: .
      dockerfile: claimsight_ai/api/Dockerfile
    # Preflight imports + clear traceback, then start uvicorn
    command:
      - bash
      - -lc
      - |
        set -euo pipefail
        echo "Python: $(python -V)"
        python - <<'PY'
        import os,sys,traceback
        print("PYTHONPATH=", os.getenv("PYTHONPATH"))
        for m in ["numpy","torch","fastapi","sqlalchemy","psycopg"]:
            try:
                __import__(m); print("OK import", m)
            except Exception as e:
                print("FAIL import", m, "->", e); sys.exit(12)
        try:
            from claimsight_ai.api.main import app
            print("app import OK")
        except Exception:
            traceback.print_exc(); sys.exit(13)
        PY
        uvicorn claimsight_ai.api.main:app --host 0.0.0.0 --port 8000 --log-level debug --proxy-headers
    ports:
      - "8000:8000"
    volumes:
      - .:/workspace
    working_dir: /workspace
    env_file: .env
    environment:
      PYTHONPATH: "/workspace"
      SNOWFLAKE_USER:       "${SNOWFLAKE_USER:-}"
      SNOWFLAKE_PASSWORD:   "${SNOWFLAKE_PASSWORD:-}"
      SNOWFLAKE_ACCOUNT:    "${SNOWFLAKE_ACCOUNT:-}"
      SNOWFLAKE_WAREHOUSE:  "${SNOWFLAKE_WAREHOUSE:-}"
      SNOWFLAKE_DATABASE:   "${SNOWFLAKE_DATABASE:-}"
      SNOWFLAKE_SCHEMA:     "${SNOWFLAKE_SCHEMA:-}"
      SNOWFLAKE_ROLE:       "${SNOWFLAKE_ROLE:-}"
      DOCS_AT_ROOT: "1"
      FORWARDED_ALLOW_IPS: "*"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        - "CMD-SHELL"
        - |
          python - <<'PY'
          import urllib.request,sys
          for path in ("/healthz","/health"):
              try:
                  urllib.request.urlopen("http://127.0.0.1:8000"+path, timeout=2)
                  sys.exit(0)
              except Exception:
                  pass
          sys.exit(1)
          PY
      interval: 3s
      timeout: 3s
      retries: 2         # fast-fail
      start_period: 15s
    restart: unless-stopped
  ui:
    image: claimsight-ai-ui:latest
    build:
      context: .
      dockerfile: ui/Dockerfile
    ports:
      - "8501:8501"
    volumes:
      - .:/workspace
    working_dir: /workspace
    environment:
      API_URL: "http://api:8000"
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: claims
      POSTGRES_PASSWORD: claims
      POSTGRES_DB: claimsdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1 -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 2
      start_period: 10s
    restart: unless-stopped
  chroma:
    image: chromadb/chroma:latest
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
    restart: unless-stopped
volumes:
  postgres_data:
  chroma_data:
