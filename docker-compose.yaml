version: "3.9"

services:
  api:
    image: claimsight-ai-api:latest
    build:
      context: .
      dockerfile: claimsight_ai/api/Dockerfile
    command: >
      uvicorn claimsight_ai.api.main:app
      --host 0.0.0.0 --port 8000
      --log-level info
      --proxy-headers
    ports:
      - "8000:8000"
    volumes:
      - .:/workspace
    working_dir: /workspace
    env_file: .env
    environment:
      SNOWFLAKE_USER:       "${SNOWFLAKE_USER:-}"
      SNOWFLAKE_PASSWORD:   "${SNOWFLAKE_PASSWORD:-}"
      SNOWFLAKE_ACCOUNT:    "${SNOWFLAKE_ACCOUNT:-}"
      SNOWFLAKE_WAREHOUSE:  "${SNOWFLAKE_WAREHOUSE:-}"
      SNOWFLAKE_DATABASE:   "${SNOWFLAKE_DATABASE:-}"
      SNOWFLAKE_SCHEMA:     "${SNOWFLAKE_SCHEMA:-}"
      SNOWFLAKE_ROLE:       "${SNOWFLAKE_ROLE:-}"
      DOCS_AT_ROOT: "1"
      FORWARDED_ALLOW_IPS: "*"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nimport urllib.request,sys\nfor path in ('/healthz','/health'):\n  try:\n    r=urllib.request.urlopen('http://127.0.0.1:8000'+path, timeout=5)\n    sys.exit(0)\n  except Exception:\n    pass\nsys.exit(1)\nPY"]
      interval: 5s
      timeout: 5s
      retries: 12
      start_period: 5s
    restart: unless-stopped

  ui:
    image: claimsight-ai-ui:latest
    build:
      context: .
      dockerfile: ui/Dockerfile
    ports:
      - "8501:8501"
    volumes:
      - .:/workspace
    working_dir: /workspace
    environment:
      API_URL: "http://api:8000"
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped

  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: claims
      POSTGRES_PASSWORD: claims
      POSTGRES_DB: claimsdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1 -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 12
      start_period: 10s
    restart: unless-stopped

  chroma:
    image: chromadb/chroma:latest
    ports:
      - "8001:8000"           # host:container
    volumes:
      - chroma_data:/chroma/chroma
    restart: unless-stopped

volumes:
  postgres_data:
  chroma_data:
