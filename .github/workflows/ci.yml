name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      APP_HOME:  ${{ github.workspace }}
      VECTOR_DIR: ${{ github.workspace }}/.cache/vectorstore
      POLICY_DIR: ${{ github.workspace }}/data/policies
      PYTHONPATH: ${{ github.workspace }}          # repo root on sys.path
      EN_MODEL: en_core_web_sm

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show repo structure
        run: |
          echo "---- repo tree (top 2 levels) ----"
          sudo apt-get update -y && sudo apt-get install -y tree
          tree -L 2 || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Persist PYTHONPATH for all steps
        run: echo "PYTHONPATH=${PYTHONPATH}:${GITHUB_WORKSPACE}" >> "$GITHUB_ENV"

      - name: Prep writable dirs
        run: mkdir -p "$VECTOR_DIR" "$POLICY_DIR"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r services/api/requirements.txt
          pip install pytest

      - name: Editable install (your package)
        run: |
          if [ -f "pyproject.toml" ] || [ -f "setup.py" ]; then
            echo "Installing project in editable mode..."
            pip install -e .
          else
            echo "No pyproject.toml or setup.py found; relying on PYTHONPATH only."
          fi

      - name: Print sys.path & verify imports
        run: |
          python - <<'PY'
          import sys, pprint, importlib
          print("---- first 10 sys.path entries ----")
          pprint.pprint(sys.path[:10])
          print("Attempting: import services.integrations")
          try:
              importlib.import_module("services.integrations")
              print("✅ import services.integrations OK")
          except Exception as e:
              print("❌ import services.integrations FAILED:", repr(e))
              # If your package is renamed, try alternate import:
              try:
                  importlib.import_module("claimsight_ai.integrations")
                  print("✅ import claimsight_ai.integrations OK")
              except Exception as e2:
                  print("❌ import claimsight_ai.integrations FAILED:", repr(e2))
                  raise SystemExit(1)
          PY

      - name: Run tests (verbose to see exact failure)
        env:
          PYTHONWARNINGS: default
        run: pytest -vv
